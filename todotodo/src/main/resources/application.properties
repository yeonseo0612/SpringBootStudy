spring.application.name=product
server.port=8084
#mysql \uC5F0\uB3D9
spring.datasource.url=jdbc:mysql://localhost:3306/product?serverTimezone=Asia/Seoul
spring.datasource.username=root
spring.datasource.password=1234
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

#\uD14C\uC774\uBE14 \uC790\uB3D9\uC0DD\uC131\uC774 \uC548\uB418\uB294\uACBD\uC6B0 update -> create \uBCC0\uACBD
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
#\uCEE8\uD2B8\uB864\uB7EC\uC5D0\uC11C \uC815\uC801 \uB9AC\uC18C\uC2A4\uAC00 \uC544\uB2CC templates\uC5D0\uC11C html \uD30C\uC77C\uC744 \uCC3E\uB3C4\uB85D \uB3C4\uC640\uC8FC\uB294 \uAC83
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
#------------------------------------------------------------------------------------------------------------------------------------------------------------
#옵션	설명
#none	아무 작업도 하지 않음 (가장 안전함)
#update	테이블이 없으면 생성하고, 컬럼은 변경된 부분만 업데이트 (데이터는 유지됨) ✅ 추천
#create	매번 실행 시마다 테이블 전체 삭제 후 새로 생성 (데이터 삭제됨) ❌ 위험
#create-drop	실행 시 테이블 생성, 종료 시 테이블 삭제 (테스트용에만)
#validate	테이블이 엔티티와 일치하는지 확인만 함 (수정 안 함)